import{Grab as v}from"./index.DXIRqF6l.js";import{d as y}from"./CanvasUtils.jUD0xvCj.js";import{g as L,n as k,c as O,L as h,M as C,o as M}from"./2.CJVAocmz.js";import{E as w}from"./ExternalInteractorBase.CIi3zRdK.js";const D=0;function E(r,t,i,n,o,e){y(r,i,n),r.strokeStyle=L(o,e),r.lineWidth=t,r.stroke()}function G(r,t,i,n,o){r.canvas.draw(e=>{const s=t.getPosition();E(e,t.retina.linksWidth??D,s,o,i,n)})}const P="grab",q=0,H=0;class x extends w{constructor(t){super(t)}clear(){}init(){const t=this.container,i=t.actualOptions.interactivity.modes.grab;i&&(t.retina.grabModeDistance=i.distance*t.retina.pixelRatio)}interact(){var c;const t=this.container,i=t.actualOptions,n=i.interactivity;if(!n.modes.grab||!n.events.onHover.enable||t.interactivity.status!==k)return;const o=t.interactivity.mouse.position;if(!o)return;const e=t.retina.grabModeDistance;if(!e||e<q)return;const s=t.particles.quadTree.queryCircle(o,e,a=>this.isEnabled(a));for(const a of s){const f=a.getPosition(),l=O(f,o);if(l>e)continue;const b=n.modes.grab.links,d=b.opacity,g=d-l*d/e;if(g<=H)continue;const u=b.color??((c=a.options.links)==null?void 0:c.color);if(!t.particles.grabLineColor&&u){const p=n.modes.grab.links;t.particles.grabLineColor=h(u,p.blink,p.consent)}const m=C(a,void 0,t.particles.grabLineColor);m&&G(t,a,m,g,o)}}isEnabled(t){const i=this.container,n=i.interactivity.mouse,o=((t==null?void 0:t.interactivity)??i.actualOptions.interactivity).events;return o.onHover.enable&&!!n.position&&M(P,o.onHover.mode)}loadModeOptions(t,...i){t.grab||(t.grab=new v);for(const n of i)t.grab.load(n==null?void 0:n.grab)}reset(){}}export{x as Grabber};
